{"ast":null,"code":"// src/services/authService.js\n\nimport mockUsers from '../data/mockUsers'; // Import mock user data\n\n// Simulate an API call for logging in\nconst login = (username, password) => {\n  return new Promise((resolve, reject) => {\n    const user = mockUsers.find(user => user.username === username);\n    if (user) {\n      // Check if the password matches\n      if (user.password === password) {\n        resolve({\n          ...user,\n          isAuthenticated: true\n        });\n      } else {\n        reject(new Error('Invalid password'));\n      }\n    } else {\n      reject(new Error('User not found'));\n    }\n  });\n};\n\n// Simulate an API call for user registration\nconst register = newUser => {\n  return new Promise(resolve => {\n    // Here you would typically send a request to your API to create a user\n    mockUsers.push(newUser); // Add the new user to the mock data\n    resolve(newUser);\n  });\n};\n\n// Simulate checking if the user is authenticated\nconst isAuthenticated = username => {\n  return mockUsers.some(user => user.username === username);\n};\nexport default {\n  login,\n  register,\n  isAuthenticated\n};","map":{"version":3,"names":["mockUsers","login","username","password","Promise","resolve","reject","user","find","isAuthenticated","Error","register","newUser","push","some"],"sources":["/Users/christoskalogridakis/projects/demo/CocktailAPI/cocktailsapi/src/services/authService.js"],"sourcesContent":["// src/services/authService.js\n\nimport mockUsers from '../data/mockUsers'; // Import mock user data\n\n// Simulate an API call for logging in\nconst login = (username, password) => {\n  return new Promise((resolve, reject) => {\n    const user = mockUsers.find(user => user.username === username);\n    if (user) {\n      // Check if the password matches\n      if (user.password === password) {\n        resolve({ ...user, isAuthenticated: true });\n      } else {\n        reject(new Error('Invalid password'));\n      }\n    } else {\n      reject(new Error('User not found'));\n    }\n  });\n};\n\n// Simulate an API call for user registration\nconst register = (newUser) => {\n  return new Promise((resolve) => {\n    // Here you would typically send a request to your API to create a user\n    mockUsers.push(newUser); // Add the new user to the mock data\n    resolve(newUser);\n  });\n};\n\n// Simulate checking if the user is authenticated\nconst isAuthenticated = (username) => {\n  return mockUsers.some(user => user.username === username);\n};\n\nexport default {\n  login,\n  register,\n  isAuthenticated,\n};\n"],"mappings":"AAAA;;AAEA,OAAOA,SAAS,MAAM,mBAAmB,CAAC,CAAC;;AAE3C;AACA,MAAMC,KAAK,GAAGA,CAACC,QAAQ,EAAEC,QAAQ,KAAK;EACpC,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC,MAAMC,IAAI,GAAGP,SAAS,CAACQ,IAAI,CAACD,IAAI,IAAIA,IAAI,CAACL,QAAQ,KAAKA,QAAQ,CAAC;IAC/D,IAAIK,IAAI,EAAE;MACR;MACA,IAAIA,IAAI,CAACJ,QAAQ,KAAKA,QAAQ,EAAE;QAC9BE,OAAO,CAAC;UAAE,GAAGE,IAAI;UAAEE,eAAe,EAAE;QAAK,CAAC,CAAC;MAC7C,CAAC,MAAM;QACLH,MAAM,CAAC,IAAII,KAAK,CAAC,kBAAkB,CAAC,CAAC;MACvC;IACF,CAAC,MAAM;MACLJ,MAAM,CAAC,IAAII,KAAK,CAAC,gBAAgB,CAAC,CAAC;IACrC;EACF,CAAC,CAAC;AACJ,CAAC;;AAED;AACA,MAAMC,QAAQ,GAAIC,OAAO,IAAK;EAC5B,OAAO,IAAIR,OAAO,CAAEC,OAAO,IAAK;IAC9B;IACAL,SAAS,CAACa,IAAI,CAACD,OAAO,CAAC,CAAC,CAAC;IACzBP,OAAO,CAACO,OAAO,CAAC;EAClB,CAAC,CAAC;AACJ,CAAC;;AAED;AACA,MAAMH,eAAe,GAAIP,QAAQ,IAAK;EACpC,OAAOF,SAAS,CAACc,IAAI,CAACP,IAAI,IAAIA,IAAI,CAACL,QAAQ,KAAKA,QAAQ,CAAC;AAC3D,CAAC;AAED,eAAe;EACbD,KAAK;EACLU,QAAQ;EACRF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}